Chatgpt suggested contents to fix the reveal requested to show after refresh:

/app/api/question/[id]/page.tsx:

import { createClient } from '@/lib/supabase/server'
import { redirect } from 'next/navigation'
import AnswerForm from '@/components/AnswerForm'
import AnswerList from '@/components/AnswerList'

interface Props {
  params: {
    id: string
  }
}

export default async function QuestionPage({ params }: Props) {
  const questionId = params?.id
  const supabase = createClient()

  // ‚úÖ Check if user is logged in
  const {
    data: { session },
  } = await supabase.auth.getSession()

  if (!session) {
    redirect('/login') // üîê Require login
  }

  const currentUserId = session.user.id

  // ‚úÖ Fetch question + answers with author + reveal info
  const { data: question, error } = await supabase
    .from('questions')
    .select(`
      id,
      content,
      created_at,
      answers (
        id,
        content,
        created_at,
        user_id,
        reveal_status,
        votes(count),
        user_votes: votes (
          id,
          user_id,
          ip_address
        )
        reveal_requests (
          requested_by
        )
      )
    `)
    .eq('id', questionId)
    .single()

  if (error || !question) {
    console.error('Error loading question:', error)
    return (
      <div className="p-4 text-red-600">
        Question not found or error loading.
      </div>
    )
  }

  // ‚úÖ Enrich answers with vote count and whether user voted
  const enrichedAnswers = (question.answers || []).map((answer) => {
    const voted = answer.user_votes?.some(
      (vote) => vote.user_id === currentUserId
    )

    const revealRequested = answer.reveal_requests?.some(
      (req) => req.requested_by === currentUserId
    )

    return {
      ...answer,
      votes_count: answer.votes?.[0]?.count || 0,
      voted,
      revealRequested, // ‚úÖ include this
    }
  })

  return (
    <div className="max-w-2xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-2">Question</h1>
      <p className="text-gray-700 mb-6">{question.content}</p>

      <section className="mb-10">
        <h2 className="text-xl font-semibold mb-4">Answers</h2>
        <AnswerList
          answers={enrichedAnswers}
          currentUserId={currentUserId} // ‚úÖ Pass this in
        />
      </section>

      <section>
        <h2 className="text-xl font-semibold mb-2">Your Answer</h2>
        <AnswerForm questionId={question.id} />
      </section>
    </div>
  )
}

//components/AnswerList.tsx

'use client'

import UpvoteButton from './UpvoteButton'
import { RequestRevealButton } from './RequestRevealButton' // new import

interface Answer {
  id: string
  content: string
  created_at: string
  user_id: string
  reveal_status: boolean
  votes_count: number
  voted: boolean
  revealRequested?: boolean
}

interface Props {
  answers: Answer[]
  votedAnswerIds?: string[]
  currentUserId: string
}

export default function AnswerList({ answers, votedAnswerIds = [], currentUserId }: Props) {
  // Find top-voted answer
  const topVotedAnswerId = answers.reduce((topId, curr) => {
    const top = answers.find((a) => a.id === topId)
    return (curr.votes_count > (top?.votes_count ?? 0)) ? curr.id : topId
  }, answers[0]?.id ?? '')

  return (
    <div className="space-y-6">
      {answers.length === 0 && (
        <p className="text-gray-500">No answers yet.</p>
      )}
      {answers.map((answer) => (
        <div key={answer.id} className="border rounded p-4">
          <p className="text-gray-800">{answer.content}</p>
          <div className="mt-2 text-sm text-gray-500 flex items-center gap-4">
            <span>{new Date(answer.created_at).toLocaleString()}</span>
            <UpvoteButton
              answerId={answer.id}
              initialCount={answer.votes_count}
              voted={answer.voted}
            />
          </div>

          {/* üëá Request Reveal Button for top-voted, anonymous answers */}
          {answer.id === topVotedAnswerId && !answer.reveal_status && (
            <RequestRevealButton
              answerId={answer.id}
              currentUserId={currentUserId}
              authorId={answer.user_id}
              revealStatus={answer.reveal_status}
              revealRequested={answer.revealRequested}
            />
          )}
        </div>
      ))}
    </div>
  )
}

// RequestRevealButton.tsx:

'use client'

import { useEffect, useState } from 'react'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'

interface Props {
  answerId: string
  currentUserId: string
  authorId: string
  revealStatus: boolean
}

export function RequestRevealButton({
  answerId,
  currentUserId,
  authorId,
  revealStatus
}: Props) {
  const supabase = createClientComponentClient()
  const [hasRequested, setHasRequested] = useState(false)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    async function checkIfAlreadyRequested() {
      const { data, error } = await supabase
        .from('reveal_requests')
        .select('id')
        .eq('answer_id', answerId)
        .eq('requested_by', currentUserId)
        .maybeSingle()

      if (data) {
        setHasRequested(true)
      }

      setLoading(false)
    }

    if (currentUserId && !revealStatus) {
      checkIfAlreadyRequested()
    } else {
      setLoading(false)
    }
  }, [answerId, currentUserId, revealStatus, supabase])

  async function handleRequestReveal() {
    // Immediately update state for UI feedback
    setHasRequested(true)

    // Step 1: Insert into reveal_requests
    const { error: requestError } = await supabase
      .from('reveal_requests')
      .insert({
        answer_id: answerId,
        requested_by: currentUserId
      })

    if (requestError) {
      console.error('Failed to create reveal request:', requestError.message)
      setHasRequested(false) // rollback
      return
    }

    // Step 2: Insert notification for author
    const { error: notifyError } = await supabase
      .from('notifications')
      .insert({
        user_id: authorId,
        answer_id: answerId,
        type: 'reveal_request'
      })

    if (notifyError) {
      console.error('Failed to create notification:', notifyError.message)
    }
  }

  // üîí Conditions where button shouldn't show
  if (
    loading ||
    revealStatus ||
    currentUserId === authorId
  ) {
    return null
  }

  // Show final state
  return (
    <button
      onClick={handleRequestReveal}
      disabled={hasRequested}
      className="mt-2 text-sm text-blue-600 underline"
    >
      {hasRequested ? 'Reveal Requested' : 'Request Reveal'}
    </button>
  )
}